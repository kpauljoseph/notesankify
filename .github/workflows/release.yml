name: Release NotesAnkify

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pages: write
  id-token: write

# Steps to use this workflow:
# 1. Build packages locally using: make package-all
# 2. Push a tag: git tag v0.1.0 && git push origin v0.1.0
# 3. This workflow will create the release and update metadata
# 4. Upload built packages using the upload script (see upload-release.sh)
# 5. Review and publish the release on GitHub

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: NotesAnkify ${{ github.ref }}
          draft: true
          prerelease: false
          body: "Loading release notes..."
  update-metadata:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate version.json
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          # Create temporary folder for version.json only
          mkdir -p temp-version
          
          # Generate version.json in temporary folder
          cat > temp-version/version.json << EOF
          {
              "latest_version": "${VERSION}",
              "min_version": "${VERSION}",
              "download_url": "https://notesankify.github.io/download",
              "update_message": "New version ${VERSION} is available with improvements and bug fixes!",
              "force_update": false,
              "platform_downloads": {
                  "windows/amd64": "https://github.com/kpauljoseph/notesankify/releases/download/${VERSION}/NotesAnkify-windows-amd64.zip",
                  "windows/arm64": "https://github.com/kpauljoseph/notesankify/releases/download/${VERSION}/NotesAnkify-windows-arm64.zip",
                  "macos/all": "https://github.com/kpauljoseph/notesankify/releases/download/${VERSION}/NotesAnkify-macos-universal.zip",
                  "linux/amd64": "https://github.com/kpauljoseph/notesankify/releases/download/${VERSION}/NotesAnkify-linux-amd64.tar.xz"
              }
          }
          EOF

      - name: Deploy version.json
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository-name: kpauljoseph/notesankify.github.io
          branch: main
          folder: temp-version
          clean: false
          target-folder: .

  update-release-notes:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          NOTES=$(awk "/## \[$VERSION\]/{p=1;print;next} /## \[/{p=0} p" CHANGELOG.md)
          # Use --draft flag to ensure we're updating existing draft
          gh release edit $TAG --draft --notes "$NOTES" || echo "Failed to update release notes"

# ORIGINAL FULL CI/CD WORKFLOW (Currently disabled)
# This section is preserved for reference and will be re-enabled once
# fyne-cross packaging issues in GitHub Actions are resolved
#
#  build:
#    needs: create-release
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: '1.21'
#
#      - name: Install Dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y imagemagick make gcc libgl1-mesa-dev xorg-dev
#          sudo ln -s /usr/bin/convert /usr/bin/magick
#          go install github.com/fyne-io/fyne-cross@latest
#          go install fyne.io/fyne/v2/cmd/fyne@latest
#
#      - name: Set up macOS SDK
#        run: |
#          # Download pre-packaged minimal SDK
#          wget https://github.com/joseluisq/macosx-sdks/releases/download/12.3/MacOSX12.3.sdk.tar.xz
#
#          # Create directory and extract
#          mkdir -p $HOME/MacOSX-SDKs
#          tar xf MacOSX12.3.sdk.tar.xz -C $HOME/MacOSX-SDKs/
#
#          echo "SDK location: $HOME/MacOSX-SDKs/MacOSX12.3.sdk"
#          ls -la $HOME/MacOSX-SDKs/MacOSX12.3.sdk
#
#      - name: Generate version.json
#        run: |
#          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
#          cat > version.json << EOF
#          {
#              "latest_version": "$VERSION",
#              "min_version": "$VERSION",
#              "download_url": "https://notesankify.github.io/download",
#              "update_message": "New version $VERSION is available with improvements and bug fixes!",
#              "force_update": false,
#              "platform_downloads": {
#                  "windows": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-windows-amd64.exe",
#                  "darwin": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-darwin-universal.zip",
#                  "linux": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-linux-amd64.tar.gz"
#              }
#          }
#          EOF
#
#      - name: Build All Platforms
#        env:
#          MACOS_SDK_PATH: "${HOME}/MacOSX-SDKs/MacOSX12.3.sdk"
#        run: |
#          # Modify darwin-app command to include SDK path
#          sed -i "s|fyne-cross darwin|fyne-cross darwin --macosx-sdk-path ${MACOS_SDK_PATH} |g" Makefile
#          make package-all
#
#      # Prepare release artifacts
#      - name: Prepare macOS Universal Build
#        run: |
#          mkdir -p universal-darwin
#          cp -r fyne-cross/dist/darwin-amd64/NotesAnkify.app universal-darwin/
#          cp -r fyne-cross/dist/darwin-arm64/NotesAnkify.app/Contents/MacOS/gui universal-darwin/NotesAnkify.app/Contents/MacOS/gui-arm64
#          cd universal-darwin/NotesAnkify.app/Contents/MacOS
#          lipo -create gui gui-arm64 -output gui
#          rm gui-arm64
#          cd ../../../
#          zip -r NotesAnkify-darwin-universal.zip NotesAnkify.app
#
#      - name: Prepare Windows Build
#        run: |
#          cp fyne-cross/dist/windows-amd64/gui.exe NotesAnkify-windows-amd64.exe
#
#      # Upload the version.json to GitHub Pages repo
#      - name: Deploy version.json
#        uses: JamesIves/github-pages-deploy-action@v4
#        with:
#          token: ${{ secrets.ACCESS_TOKEN }}
#          repository-name: kpauljoseph/notesankify.github.io
#          branch: main
#          folder: .
#          target-folder: .
#          files: version.json
#
#      # Upload Release Assets
#      - name: Upload macOS Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create-release.outputs.upload_url }}
#          asset_path: ./NotesAnkify-darwin-universal.zip
#          asset_name: NotesAnkify-darwin-universal.zip
#          asset_content_type: application/zip
#
#      - name: Upload Windows Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create-release.outputs.upload_url }}
#          asset_path: ./NotesAnkify-windows-amd64.exe
#          asset_name: NotesAnkify-windows-amd64.exe
#          asset_content_type: application/octet-stream
#
#  update-release-notes:
#    needs: [create-release, build]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      # Update release notes from CHANGELOG.md
#      - name: Update Release Notes
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          TAG=${GITHUB_REF#refs/tags/}
#          VERSION=${TAG#v}
#          NOTES=$(awk "/## \[$VERSION\]/{p=1;print;next} /## \[/{p=0} p" CHANGELOG.md)
#          gh release edit $TAG -n "$NOTES"