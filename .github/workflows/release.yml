name: Release NotesAnkify

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: NotesAnkify ${{ github.ref }}
          draft: true
          prerelease: false
          body: |
            Release Notes:
            - TBD (will be updated)

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Dependencies
        run: |
          brew install gcc
          go install fyne.io/fyne/v2/cmd/fyne@latest ||
          go get fyne.io/fyne/v2/cmd/fyne@latest

#      - name: Install Podman
#        if: ${{ runner.os == 'macos' }}
#        run: |
#          brew install podman
#          podman machine init
#          podman machine start

      - name: Bundle Assets
        run: make bundle-assets

      - name: Build macOS App
        run: |
          make darwin-app
#          cd fyne-cross/dist/darwin-amd64 && zip -r NotesAnkify-darwin-amd64.zip NotesAnkify.app
#          cd ../darwin-arm64 && zip -r NotesAnkify-darwin-arm64.zip NotesAnkify.app

      - name: Upload macOS AMD64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/darwin-amd64/NotesAnkify-darwin-amd64.zip
          asset_name: NotesAnkify-darwin-amd64.zip
          asset_content_type: application/zip

      - name: Upload macOS ARM64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/darwin-arm64/NotesAnkify-darwin-arm64.zip
          asset_name: NotesAnkify-darwin-arm64.zip
          asset_content_type: application/zip

  build-windows:
    needs: create-release
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          update: true
          install: >-
            make
            wget
            zip

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

#      - name: Set up MinGW
#        uses: egor-tensin/setup-mingw@v2
#        with:
#          platform: x64
      - name: Install Dependencies
        run: >
          pacman -Syu &&
          pacman --noconfirm -S git mingw-w64-x86_64-toolchain mingw-w64-x86_64-mpv mingw-w64-x86_64-go

      - name: Install Dependencies
        run: |
          go install fyne.io/fyne/v2/cmd/fyne@latest ||
          go get fyne.io/fyne/v2/cmd/fyne@latest

      - name: Show Environment
        run: |
          echo "Current directory: $PWD"
          which fyne
          gcc -v

      - name: Fix gcc
        run: |
          pacman -R gcc
          pacman -S mingw-w64-x86_64-gcc
          export PATH=$PATH:/mingw64/bin/

      - name: Bundle Assets
        run: make bundle-assets

      - name: Build Windows App
        run: make windows-app

      - name: Upload Windows Asset AMD64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/windows-amd64/NotesAnkify-windows-amd64.zip
          asset_name: NotesAnkify-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Windows Asset ARM64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/windows-arm64/NotesAnkify-windows-arm64.zip
          asset_name: NotesAnkify-windows-arm64.zip
          asset_content_type: application/zip

  update-website:
    needs: [create-release, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate version.json
        run: |
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
          cat > version.json << EOF
          {
              "latest_version": "$VERSION",
              "min_version": "$VERSION",
              "download_url": "https://notesankify.github.io/download",
              "update_message": "New version $VERSION is available with improvements and bug fixes!",
              "force_update": false,
              "platform_downloads": {
                  "windows": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-windows-amd64.exe",
                  "darwin-amd64": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-darwin-amd64.zip",
                  "darwin-arm64": "https://github.com/kpauljoseph/notesankify/releases/latest/download/NotesAnkify-darwin-arm64.zip"
              }
          }
          EOF

      - name: Deploy version.json
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository-name: kpauljoseph/notesankify.github.io
          branch: main
          folder: .
          target-folder: .
          files: version.json

  update-release-notes:
    needs: [create-release, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          NOTES=$(awk "/## \[$VERSION\]/{p=1;print;next} /## \[/{p=0} p" CHANGELOG.md)
          gh release edit $TAG -n "$NOTES"